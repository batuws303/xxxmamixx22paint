here-- Settings --

local color = Color3.fromRGB(255,255,255)

-- Values --

local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

local provincesFolder = Instance.new("Model")
provincesFolder.Parent = workspace
local highlight = Instance.new("Highlight")
highlight.FillColor = color
highlight.FillTransparency = 0.8
highlight.Parent = workspace
highlight.Adornee = provincesFolder

local UI = Instance.new("ScreenGui",player.PlayerGui)
local UIHolder = Instance.new("Frame",UI)
UIHolder.AnchorPoint = Vector2.new(0.5,0.5)
UIHolder.BackgroundTransparency = 1
UIHolder.Position = UDim2.new(0.5,0,0.5,0)
UIHolder.Size = UDim2.new(0,0,0,0)
local aspectratio = Instance.new("UIAspectRatioConstraint",UIHolder)
local mainFrame = Instance.new("Frame",UIHolder)
mainFrame.BackgroundColor3 = Color3.fromRGB(33,33,42)
mainFrame.AnchorPoint = Vector2.new(0.5,0.5)
mainFrame.Position = UDim2.new(0.5,0,0.5,0)
mainFrame.Size = UDim2.new(0.5,0,0.276,0)
mainFrame.Rotation = 359
local topBar = Instance.new("Frame",mainFrame)
topBar.BorderColor3 = Color3.fromRGB(0,0,0)
topBar.BackgroundColor3 = Color3.fromRGB(49,49,64)
topBar.Size = UDim2.new(1,0,0.14,0)
local pss = Instance.new("TextLabel",topBar)
pss.Text = "0 paint/second"
pss.AnchorPoint = Vector2.new(0,0.5)
pss.Size = UDim2.new(0.974,0,0.5,0)
pss.Position = UDim2.new(0,0,0.5,0)
pss.TextColor3 = Color3.fromRGB(255,255,255)
pss.BackgroundTransparency = 1
pss.TextScaled = true
pss.TextXAlignment = Enum.TextXAlignment.Right
local scrollFrame = Instance.new("ScrollingFrame",mainFrame)
scrollFrame.BackgroundTransparency = 1
scrollFrame.Position = UDim2.new(0,0,0.14,0)
scrollFrame.Size = UDim2.new(1,0,0.86,0)
scrollFrame.ScrollBarThickness = 0
local panelTitle = Instance.new("TextLabel",topBar)
panelTitle.AnchorPoint = Vector2.new(0,0.5)
panelTitle.BackgroundTransparency = 1
panelTitle.Position = UDim2.new(0.02,0,0.5,0)
panelTitle.Size = UDim2.new(1,0,0.5,0)
panelTitle.Text = '<b>Paint Admin Panel</b><font size="6"> PRO</font>'
panelTitle.RichText = true
panelTitle.TextScaled = true
panelTitle.TextColor3 = Color3.fromRGB(255,255,255)
panelTitle.TextXAlignment = Enum.TextXAlignment.Left
local listlayout = Instance.new("UIListLayout",scrollFrame)
listlayout.Padding = UDim.new(0,10)
local uipadding = Instance.new("UIPadding",scrollFrame)
uipadding.PaddingTop = UDim.new(0,10)
uipadding.PaddingLeft = UDim.new(0,10)
uipadding.PaddingRight = UDim.new(0,10)
uipadding.PaddingBottom = UDim.new(0,10)
local doneButton = Instance.new("TextButton",UI)
doneButton.Visible = false
doneButton.AnchorPoint = Vector2.new(0.5,0)
doneButton.BackgroundColor3 = Color3.fromRGB(0,247,159)
doneButton.Position = UDim2.new(0.5,0,0,0)
doneButton.Size = UDim2.new(0.3,0,0.1,0)
doneButton.TextColor3 = Color3.fromRGB(255,255,255)
doneButton.TextScaled = true
doneButton.Text = "Done"
doneButton.AutoButtonColor = false
doneButton.BorderSizePixel = 0
local whiteFrame = Instance.new("Frame",mainFrame)
whiteFrame.Size = UDim2.new(1,0,1,0)
whiteFrame.BackgroundColor3 = Color3.fromRGB(255,255,255)
local sound = Instance.new("Sound")
sound.SoundId = "rbxassetid://4612386227"
sound.Parent = workspace
local changecolor = Instance.new("Sound")
changecolor.SoundId = "rbxassetid://4612383790"
changecolor.Parent = workspace
local sound2 = Instance.new("Sound")
sound2.SoundId = "rbxassetid://7486747911"
sound2.Parent = workspace
sound2.PlaybackSpeed = 2
local provinceSound = Instance.new("Sound")
provinceSound.SoundId = "rbxassetid://5694665239"
provinceSound.Parent = workspace
local alertSound = Instance.new("Sound")
alertSound.SoundId = "rbxassetid://131961136"
alertSound.Parent = workspace

-- AI System Variables --
local aiEnabled = false
local protectedProvinces = {}
local attackDetectionActive = true
local multiAttackThreshold = 3
local fastDefenseMode = false
local lastAttackTime = {}
local attackHistory = {}
local defensePriority = {}

local provinces = {}

local provincespersecond = 0
local pps = 0

local selectColorMode = false
local removeProvincesMode = false
local selectProvincesMode = false
local safeMode = false
local newpaint = false
local painting = true
local keepTerColor = false

local provinceCodeGenerator = 0

local dragging
local dragInput
local dragStart
local startPos

-- AI Functions --

local function detectColorChange(province)
    if not protectedProvinces[province] then return end
    
    local currentTime = tick()
    local expectedColor = protectedProvinces[province].expectedColor
    
    if province.Color ~= expectedColor then
        -- Saldırı tespit edildi
        if not lastAttackTime[province] or currentTime - lastAttackTime[province] > 1 then
            lastAttackTime[province] = currentTime
            
            -- Saldırı geçmişine ekle
            if not attackHistory[province] then
                attackHistory[province] = {}
            end
            table.insert(attackHistory[province], currentTime)
            
            -- Son 10 saniyedeki saldırıları kontrol et
            local recentAttacks = 0
            for i = #attackHistory[province], 1, -1 do
                if currentTime - attackHistory[province][i] <= 10 then
                    recentAttacks = recentAttacks + 1
                else
                    break
                end
            end
            
            -- Çoklu saldırı tespiti
            if recentAttacks >= multiAttackThreshold then
                fastDefenseMode = true
                print("ÇOKLU SALDIRI TESPİT EDİLDİ! Hızlı savunma modu aktif.")
                alertSound:Play()
                
                -- 15 saniye sonra normal moda dön
                task.spawn(function()
                    task.wait(15)
                    fastDefenseMode = false
                    print("Hızlı savunma modu devre dışı.")
                end)
            end
            
            -- Öncelik belirleme
            defensePriority[province] = recentAttacks
            
            return true
        end
    end
    return false
end

local function calculateDefensePriority()
    -- Saldırı yoğunluğuna göre savunma önceliği hesapla
    local sortedProvinces = {}
    for province, priority in pairs(defensePriority) do
        table.insert(sortedProvinces, {province = province, priority = priority})
    end
    
    table.sort(sortedProvinces, function(a, b)
        return a.priority > b.priority
    end)
    
    return sortedProvinces
end

local function aiDefenseSystem()
    task.spawn(function()
        while aiEnabled do
            local prioritizedProvinces = calculateDefensePriority()
            
            -- Öncelikli bölgeleri savun
            for _, data in ipairs(prioritizedProvinces) do
                local province = data.province
                if protectedProvinces[province] and detectColorChange(province) then
                    -- Hızlı müdahale
                    local defenseSpeed = fastDefenseMode and 0.001 or 0.05
                    
                    if player and player.Character and player.Character:FindFirstChild("PaintBucket") then
                        local args = {
                            [1] = "PaintPart",
                            [2] = {
                                ["Part"] = province,
                                ["Color"] = protectedProvinces[province].expectedColor
                            },
                            [3] = "Peace"
                        }
                        
                        pcall(function()
                            game:GetService("Players").LocalPlayer.Character.PaintBucket.Remotes.ServerControls:InvokeServer(unpack(args))
                        end)
                        
                        provincespersecond = provincespersecond + 1
                        task.wait(defenseSpeed)
                    end
                end
            end
            
            task.wait(fastDefenseMode and 0.01 or 0.1)
        end
    end)
end

-- Functions --

local function paintProvinceLoop(province,coro,highlighty)
	-- savedColor same as original
	local savedColor = color

	-- active flag to stop the background loop when Disconnect() is called
	local active = true

	-- make an Event-like object so original code's info.Event:Disconnect() works
	local eventObject = {}
	function eventObject:Disconnect()
		active = false
		-- Remove from AI protection when disconnected
		protectedProvinces[province] = nil
	end

	-- Add to AI protection system
	protectedProvinces[province] = {
		expectedColor = savedColor,
		lastCheck = tick()
	}

	-- spawn background loop (FPS'den bağımsız)
	task.spawn(function()
		-- run until active is false (via Event:Disconnect or removal)
		while active do
			-- only paint when painting flag is true
			if painting then
				-- ensure player and PaintBucket exist
				if player and player.Character and player.Character:FindFirstChild("PaintBucket") then
					-- logic identical to original keepTerColor check
					local targetColor = keepTerColor and savedColor or color
					if (province.Color ~= color and keepTerColor == false) or (keepTerColor == true and province.Color ~= savedColor) then
						local args = {
							[1] = "PaintPart",
							[2] = {
								["Part"] = province,
								["Color"] = targetColor
							},
							[3] = "Peace"
						}
						-- invoke server (same as original)
						pcall(function()
							game:GetService("Players").LocalPlayer.Character.PaintBucket.Remotes.ServerControls:InvokeServer(unpack(args))
						end)
						-- increment counter (used by UI loop)
						provincespersecond = provincespersecond + 1
						
						-- Update expected color for AI system
						if protectedProvinces[province] then
							protectedProvinces[province].expectedColor = targetColor
						end
					end
				end
			end

			-- speed control: safeMode (slow), newpaint (fast), normal
			if safeMode then
				task.wait(1) -- keep original safer pause for safeMode
			elseif newpaint or fastDefenseMode then
				-- very small wait to increase speed while avoiding tight infinite CPU loop
				task.wait(0.01)
			else
				task.wait(0.05)
			end

			-- pps check from original was using external variable; keep behavior: if pps > 1000 nothing special here,
			-- original used pps to limit some behavior — we preserved that outer logic by leaving pps variable intact.
		end
	end)

	-- create provinceInfo similarly to original but Event is our eventObject
	local provinceInfo = {
		["Province"] = province,
		["Coroutine"] = coro,
		["Event"] = eventObject,
		["Highlight"] = highlighty
	}
	table.insert(provinces,provinceInfo)
	provinceCodeGenerator += 1
end

local function createNewOption(optionType,text,customText,enabled)
	local optionFrame = Instance.new("Frame",scrollFrame)
	optionFrame.BorderColor3 = Color3.fromRGB(0,0,0)
	optionFrame.BackgroundColor3 = Color3.fromRGB(49, 49, 64)
	optionFrame.Size = UDim2.new(1,0,0.075,0)
	optionFrame.Parent = scrollFrame
	local textlabel = Instance.new("TextLabel",optionFrame)
	textlabel.BackgroundTransparency = 1
	textlabel.Position = UDim2.new(0.02,0,0.2,0)
	textlabel.Size = UDim2.new(1,0,0.6,0)
	textlabel.TextScaled = true
	textlabel.Text = text
	textlabel.Font = Enum.Font.SourceSansBold
	textlabel.TextColor3 = Color3.fromRGB(255,255,255)
	textlabel.TextXAlignment = Enum.TextXAlignment.Left
	if optionType == "switch" then
		local switchFrame = Instance.new("Frame",optionFrame)
		switchFrame.BackgroundColor3 = Color3.fromRGB(241, 33, 103)
		switchFrame.Position = UDim2.new(0.865,0,0.125,0)
		switchFrame.Size = UDim2.new(0.125,0,0.75,0)
		switchFrame.BorderSizePixel = 0
		local switch = Instance.new("ImageButton",switchFrame)
		switch.AutoButtonColor = false
		switch.BorderSizePixel = 0
		switch.Size = UDim2.new(1,0,1,0)
		switch.BackgroundColor3 = Color3.fromRGB(255,255,255)
		local aspectRatio = Instance.new("UIAspectRatioConstraint",switch)
		if enabled then
			tweenService:Create(switch.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
			tweenService:Create(switch,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
			tweenService:Create(switch,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
		end
		return switch
	elseif optionType == "color" then
		local colorButton = Instance.new("ImageButton",optionFrame)
		colorButton.Position = UDim2.new(0.928,0,0.125,0)
		colorButton.AutoButtonColor = false
		colorButton.Size = UDim2.new(0.062,0,0.75,0)
		return colorButton
	elseif optionType == "custom" then
		local button = Instance.new("ImageButton",optionFrame)
		button.BackgroundColor3 = Color3.fromRGB(100,100,100)
		button.Position = UDim2.new(0.865,0,0.125,0)
		button.Size = UDim2.new(0.125,0,0.75,0)
		button.AutoButtonColor = false
		local textlabel = Instance.new("TextLabel",button)
		textlabel.BackgroundTransparency = 1
		textlabel.Position = UDim2.new(0.5,0,0.5,0)
		textlabel.AnchorPoint = Vector2.new(0.5,0.5)
		textlabel.Size = UDim2.new(0.8,0,0.8,0)
		textlabel.Text = customText
		textlabel.TextScaled = true
		textlabel.Font = Enum.Font.SourceSansBold
		textlabel.TextColor3 = Color3.fromRGB(255,255,255)
		return button
	end
end

local function update(input)
	local delta = input.Position - dragStart
	mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

-- Script --

wait(1)

sound:Play()

if userInputService.MouseEnabled == false then
	tweenService:Create(UIHolder,TweenInfo.new(0.5),{Size = UDim2.new(1.5,0,1.5,0)}):Play()
else
	tweenService:Create(UIHolder,TweenInfo.new(0.5),{Size = UDim2.new(0.75,0,0.75,0)}):Play()
end
tweenService:Create(mainFrame,TweenInfo.new(0.5),{Rotation = 0}):Play()
tweenService:Create(whiteFrame,TweenInfo.new(4),{BackgroundTransparency = 1}):Play()

topBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

topBar.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

userInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

local button2 = createNewOption("color","Country Color")
local button1 = createNewOption("custom","Protect Province","Add")
local button5 = createNewOption("custom","Unprotect Province","Remove")
local button3 = createNewOption("custom","Clear Provinces","Clear")
local button4 = createNewOption("switch","Safe Mode")
local togglePaintButton = createNewOption("switch","Toggle Paint",nil,true)
local newPaintButton = createNewOption("switch","Fast Paint")
local territoryColorButton = createNewOption("switch","Keep Territory Color (NEW)")
-- AI System Buttons (replacing random color buttons)
local aiSystemButton = createNewOption("switch","AI Defense System (NEW)")
local aiSensitivityButton = createNewOption("custom","AI Sensitivity (NEW)","3")

mouse.Button1Down:Connect(function()
	if mouse.Target and mouse.Target.Name == "Province" then
		if selectColorMode then
			color = mouse.Target.Color
			selectColorMode = false
			UIHolder.Visible = true
			button2.BackgroundColor3 = color
			changecolor:Play()
		end
		if selectProvincesMode then
			provinceSound:Play()
			local clone = mouse.Target:Clone()

			local coro = coroutine.create(paintProvinceLoop)
			coroutine.resume(coro,mouse.Target,coro,clone)

			clone.Position -= Vector3.new(0,0.01,0)
			clone.Material = "Glass"
			clone.Transparency = 1000000
			clone.Parent = provincesFolder
		end
		if removeProvincesMode then
			for _,info in pairs(provinces) do
				if mouse.Target == info.Province then
					coroutine.close(info.Coroutine)
					info.Event:Disconnect()
					info.Highlight:Destroy()
				end
			end
		end
	end
end)

button2.BackgroundColor3 = color
button2.MouseButton1Down:Connect(function()
	UIHolder.Visible = false
	selectColorMode = true
end)

button1.MouseButton1Down:Connect(function()
	UIHolder.Visible = false
	selectProvincesMode = true
	doneButton.Visible = true
end)

doneButton.MouseButton1Down:Connect(function()
	removeProvincesMode = false
	selectProvincesMode = false
	UIHolder.Visible = true
	doneButton.Visible = false
end)

button3.MouseButton1Down:Connect(function()
	for _,info in pairs(provinces) do
		coroutine.close(info.Coroutine)
		info.Event:Disconnect()
		info.Highlight:Destroy()
	end
	-- Clear AI data
	protectedProvinces = {}
	defensePriority = {}
	attackHistory = {}
	print("All provinces and AI data cleared")
end)

button4.MouseButton1Down:Connect(function()
	sound2:Play()
	if safeMode then
		safeMode = false
		tweenService:Create(button4.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
		tweenService:Create(button4,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
		tweenService:Create(button4,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
	else
		safeMode = true
		tweenService:Create(button4.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
		tweenService:Create(button4,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
		tweenService:Create(button4,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
	end
end)

button5.MouseButton1Down:Connect(function()
	UIHolder.Visible = false
	removeProvincesMode = true
	doneButton.Visible = true
end)

togglePaintButton.MouseButton1Down:Connect(function()
	sound2:Play()
	if painting then
		painting = false
		tweenService:Create(togglePaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
		tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
		tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
	else
		painting = true
		tweenService:Create(togglePaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
		tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
		tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
	end
end)

newPaintButton.MouseButton1Down:Connect(function()
	sound2:Play()
	if newpaint then
		newpaint = false
		tweenService:Create(newPaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
		tweenService:Create(newPaintButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
		tweenService:Create(newPaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
	else
		newpaint = true
		tweenService:Create(newPaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
		tweenService:Create(newPaintButton,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
		tweenService:Create(newPaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
	end
end)

territoryColorButton.MouseButton1Down:Connect(function()
	sound2:Play()
	if keepTerColor then
		keepTerColor = false
		tweenService:Create(territoryColorButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
		tweenService:Create(territoryColorButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
		tweenService:Create(territoryColorButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
	else
		keepTerColor = true
		tweenService:Create(territoryColorButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
		tweenService:Create(territoryColorButton,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
		tweenService:Create(territoryColorButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
	end
end)

-- AI System Button
aiSystemButton.MouseButton1Down:Connect(function()
	sound2:Play()
	if aiEnabled then
		aiEnabled = false
		tweenService:Create(aiSystemButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
		tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
		tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
		print("AI Defense System DISABLED")
	else
		aiEnabled = true
		tweenService:Create(aiSystemButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
		tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
		tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
		print("AI Defense System ACTIVATED - Smart Defense Online!")
		aiDefenseSystem()
	end
end)

-- AI Sensitivity Button
aiSensitivityButton.MouseButton1Down:Connect(function()
	if multiAttackThreshold == 3 then
		multiAttackThreshold = 5
		aiSensitivityButton.TextLabel.Text = "5"
		print("AI Sensitivity: 5 attacks (Less Sensitive)")
	elseif multiAttackThreshold == 5 then
		multiAttackThreshold = 2
		aiSensitivityButton.TextLabel.Text = "2"
		print("AI Sensitivity: 2 attacks (Very Sensitive)")
	else
		multiAttackThreshold = 3
		aiSensitivityButton.TextLabel.Text = "3"
		print("AI Sensitivity: 3 attacks (Normal)")
	end
	sound2:Play()
end)

userInputService.InputBegan:Connect(function(input,isTyping)
	if isTyping == false then
		if input.KeyCode == Enum.KeyCode.Q then
			if painting then
				painting = false
				tweenService:Create(togglePaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
				tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
				tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
			else
				painting = true
				tweenService:Create(togglePaintButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(53, 227, 153)}):Play()
				tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{Position = UDim2.new(1,0,0,0)}):Play()
				tweenService:Create(togglePaintButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(1,0)}):Play()
			end
		elseif input.KeyCode == Enum.KeyCode.E then
			-- Toggle AI System with E key
			if aiEnabled then
				aiEnabled = false
				tweenService:Create(aiSystemButton.Parent,TweenInfo.new(0.1),{BackgroundColor3 = Color3.fromRGB(241, 33, 103)}):Play()
				tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{Position = UDim2.new(0,0,0,0)}):Play()
				tweenService:Create(aiSystemButton,TweenInfo.new(0.1),{AnchorPoint = Vector2.new(0,0)}):Play()
				print("AI Defense System DISABLED (E key)")
			else
				aiEnabled = true
				tweenService:Create(aiSystemButton.Parent,TweenInfo.new(0.1),{BackgroundColor
